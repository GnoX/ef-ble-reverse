syntax = "proto2";

package platform5;

enum PlCmdSets {
  PL_NONE_CMD_SETS = 0;
  PL_BASIC_CMD_SETS = 1;
  PL_EXT_CMD_SETS = 254;
}

enum PlCmdId {
  PL_CMD_ID_NONE = 0;
  PL_CMD_ID_XLOG = 16;
  PL_CMD_ID_WATTH = 32;
  PL_CMD_ID_AMBIENT_LIGHT = 97;
  PL_CMD_IDT_EMS_REQ_BMS_ANALYSIS_DATA = 105;
  PL_CMD_IDT_BMS_REQ_EMS_ANALYSIS_DATA = 112;
  PL_CMD_IDT_ANALYSIS_VOL_DATA = 113;
  PL_CMD_IDT_ANALYSIS_TEMP_DATA = 114;
  PL_CMD_IDT_ANALYSIS_AMP_DATA = 115;
  PL_CMD_IDT_ANALYSIS_WATTS_DATA = 116;
  PL_CMD_IDT_ANALYSIS_OTHER_DATA = 117;
  PL_CMD_IDT_ANALYSIS_EX_SC_DATA = 118;
  PL_CMD_IDT_ANALYSIS_IN_SC_DATA = 119;
}

message EnergyItem {
  optional uint32 timestamp = 1;
  optional uint32 watth_type = 2;
  repeated uint32 watth = 3;
}

message EnergyTotalReport {
  optional uint32 watth_seq = 1;
  optional .EnergyItem watth_item = 2;
}

message EnergyTotalReportAck {
  optional uint32 result = 1;
  optional uint32 watth_seq = 2;
  optional uint32 watth_type = 3;
}

message EventRecordItem {
  optional uint32 timestamp = 1;
  optional uint32 sys_ms = 2;
  optional uint32 event_no = 3;
  repeated float event_detail = 4;
}

message EventRecordReport {
  optional uint32 event_ver = 1;
  optional uint32 event_seq = 2;
  repeated .EventRecordItem event_item = 3;
}

message EventInfoReportAck {
  optional uint32 result = 1;
  optional uint32 event_seq = 2;
  optional uint32 event_item_num = 3;
}

message ProductNameSet {
  optional string name = 1;
}

message ProductNameSetAck {
  optional uint32 result = 1;
}

message ProductNameGet {
}

message ProductNameGetAck {
  optional string name = 3;
}

message RTCTimeGet {
}

message RTCTimeGetAck {
  optional uint32 timestamp = 1;
  optional int32 timezone = 2;
}

message RTCTimeSet {
  optional uint32 timestamp = 1;
  optional int32 timezone = 2;
}

message RTCTimeSetAck {
  optional uint32 result = 1;
}
